// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authUsersFieldNames          = builder.RawFieldNames(&AuthUsers{})
	authUsersRows                = strings.Join(authUsersFieldNames, ",")
	authUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(authUsersFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	authUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(authUsersFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAuthUsersUserIdPrefix = "cache:authUsers:userId:"
)

type (
	authUsersModel interface {
		Insert(ctx context.Context, data *AuthUsers) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*AuthUsers, error)
		Update(ctx context.Context, data *AuthUsers) error
		Delete(ctx context.Context, userId int64) error
		FindOneByUser(ctx context.Context, user string) (*AuthUsers, error)
	}

	defaultAuthUsersModel struct {
		sqlc.CachedConn
		table string
	}

	AuthUsers struct {
		UserId   int64          `db:"user_id"`   // 用户ID
		Username string         `db:"username"`  // 用户登录名
		Password string         `db:"password"`  // 用户登录密码
		NickName string         `db:"nick_name"` // 用户昵称
		RoleName string         `db:"role_name"` // 角色名;管理员admin,开发者dev
		Source   string         `db:"source"`    // 用户类型1local 2ldap
		RoleType int64          `db:"role_type"` // 角色类型1管理员admin 2是开发者dev
		Email    string 		`db:"email"`     // 用户邮箱
		Mobile   string 		`db:"mobile"`    // 用户手机号
	}
)

func newAuthUsersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuthUsersModel {
	return &defaultAuthUsersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`auth_users`",
	}
}

func (m *defaultAuthUsersModel) Delete(ctx context.Context, userId int64) error {
	authUsersUserIdKey := fmt.Sprintf("%s%v", cacheAuthUsersUserIdPrefix, userId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, authUsersUserIdKey)
	return err
}

func (m *defaultAuthUsersModel) FindOne(ctx context.Context, userId int64) (*AuthUsers, error) {
	authUsersUserIdKey := fmt.Sprintf("%s%v", cacheAuthUsersUserIdPrefix, userId)
	var resp AuthUsers
	err := m.QueryRowCtx(ctx, &resp, authUsersUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", authUsersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthUsersModel) Insert(ctx context.Context, data *AuthUsers) (sql.Result, error) {
	authUsersUserIdKey := fmt.Sprintf("%s%v", cacheAuthUsersUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, authUsersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Username, data.Password, data.NickName, data.RoleName, data.Source, data.RoleType, data.Email, data.Mobile)
	}, authUsersUserIdKey)
	return ret, err
}

func (m *defaultAuthUsersModel) Update(ctx context.Context, data *AuthUsers) error {
	authUsersUserIdKey := fmt.Sprintf("%s%v", cacheAuthUsersUserIdPrefix, data.UserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, authUsersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.NickName, data.RoleName, data.Source, data.RoleType, data.Email, data.Mobile, data.UserId)
	}, authUsersUserIdKey)
	return err
}

func (m *defaultAuthUsersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAuthUsersUserIdPrefix, primary)
}

func (m *defaultAuthUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", authUsersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuthUsersModel) tableName() string {
	return m.table
}
