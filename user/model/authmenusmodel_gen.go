// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authMenusFieldNames          = builder.RawFieldNames(&AuthMenus{})
	authMenusRows                = strings.Join(authMenusFieldNames, ",")
	authMenusRowsExpectAutoSet   = strings.Join(stringx.Remove(authMenusFieldNames, "`menu_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	authMenusRowsWithPlaceHolder = strings.Join(stringx.Remove(authMenusFieldNames, "`menu_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAuthMenusMenuIdPrefix = "cache:authMenus:menuId:"
)

type (
	authMenusModel interface {
		Insert(ctx context.Context, data *AuthMenus) (sql.Result, error)
		FindOne(ctx context.Context, menuId int64) (*AuthMenus, error)
		Update(ctx context.Context, data *AuthMenus) error
		Delete(ctx context.Context, menuId int64) error
	}

	defaultAuthMenusModel struct {
		sqlc.CachedConn
		table string
	}

	AuthMenus struct {
		MenuId   int64          `db:"menu_id"`   // 菜单ID
		MenuName string         `db:"menu_name"` // 菜单名称
		Path     sql.NullString `db:"path"`      // 菜单路径
		Icon     sql.NullString `db:"icon"`      // 菜单图标
		ParentId sql.NullInt64  `db:"parent_id"` // 父菜单ID
		Order    int64          `db:"order"`     // 菜单排序
	}
)

func newAuthMenusModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuthMenusModel {
	return &defaultAuthMenusModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`auth_menus`",
	}
}

func (m *defaultAuthMenusModel) Delete(ctx context.Context, menuId int64) error {
	authMenusMenuIdKey := fmt.Sprintf("%s%v", cacheAuthMenusMenuIdPrefix, menuId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `menu_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, menuId)
	}, authMenusMenuIdKey)
	return err
}

func (m *defaultAuthMenusModel) FindOne(ctx context.Context, menuId int64) (*AuthMenus, error) {
	authMenusMenuIdKey := fmt.Sprintf("%s%v", cacheAuthMenusMenuIdPrefix, menuId)
	var resp AuthMenus
	err := m.QueryRowCtx(ctx, &resp, authMenusMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `menu_id` = ? limit 1", authMenusRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, menuId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthMenusModel) Insert(ctx context.Context, data *AuthMenus) (sql.Result, error) {
	authMenusMenuIdKey := fmt.Sprintf("%s%v", cacheAuthMenusMenuIdPrefix, data.MenuId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, authMenusRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MenuName, data.Path, data.Icon, data.ParentId, data.Order)
	}, authMenusMenuIdKey)
	return ret, err
}

func (m *defaultAuthMenusModel) Update(ctx context.Context, data *AuthMenus) error {
	authMenusMenuIdKey := fmt.Sprintf("%s%v", cacheAuthMenusMenuIdPrefix, data.MenuId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `menu_id` = ?", m.table, authMenusRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MenuName, data.Path, data.Icon, data.ParentId, data.Order, data.MenuId)
	}, authMenusMenuIdKey)
	return err
}

func (m *defaultAuthMenusModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAuthMenusMenuIdPrefix, primary)
}

func (m *defaultAuthMenusModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `menu_id` = ? limit 1", authMenusRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuthMenusModel) tableName() string {
	return m.table
}
