// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userClient

import (
	"context"

	"github.com/Sion-L/devops/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LdapSourceReq  = user.LdapSourceReq
	LdapSourceResp = user.LdapSourceResp
	LdapVerifyReq  = user.LdapVerifyReq
	LdapVerifyResp = user.LdapVerifyResp
	LoginReq       = user.LoginReq
	LoginResp      = user.LoginResp

	User interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		LdapSource(ctx context.Context, in *LdapSourceReq, opts ...grpc.CallOption) (*LdapSourceResp, error)
		LdapVerify(ctx context.Context, in *LdapVerifyReq, opts ...grpc.CallOption) (*LdapVerifyResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) LdapSource(ctx context.Context, in *LdapSourceReq, opts ...grpc.CallOption) (*LdapSourceResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LdapSource(ctx, in, opts...)
}

func (m *defaultUser) LdapVerify(ctx context.Context, in *LdapVerifyReq, opts ...grpc.CallOption) (*LdapVerifyResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LdapVerify(ctx, in, opts...)
}
