// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authRoleMenuFieldNames          = builder.RawFieldNames(&AuthRoleMenu{})
	authRoleMenuRows                = strings.Join(authRoleMenuFieldNames, ",")
	authRoleMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(authRoleMenuFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	authRoleMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(authRoleMenuFieldNames, "`menu_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAuthRoleMenuMenuIdPrefix = "cache:authRoleMenu:menuId:"
)

type (
	authRoleMenuModel interface {
		Insert(ctx context.Context, data *AuthRoleMenu) (sql.Result, error)
		FindOne(ctx context.Context, menuId int64) (*AuthRoleMenu, error)
		Update(ctx context.Context, data *AuthRoleMenu) error
		Delete(ctx context.Context, menuId int64) error
	}

	defaultAuthRoleMenuModel struct {
		sqlc.CachedConn
		table string
	}

	AuthRoleMenu struct {
		RoleName string `db:"role_name"` // 角色名称
		MenuId   int64  `db:"menu_id"`   // 菜单ID
	}
)

func newAuthRoleMenuModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuthRoleMenuModel {
	return &defaultAuthRoleMenuModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`auth_role_menu`",
	}
}

func (m *defaultAuthRoleMenuModel) Delete(ctx context.Context, menuId int64) error {
	authRoleMenuMenuIdKey := fmt.Sprintf("%s%v", cacheAuthRoleMenuMenuIdPrefix, menuId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `menu_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, menuId)
	}, authRoleMenuMenuIdKey)
	return err
}

func (m *defaultAuthRoleMenuModel) FindOne(ctx context.Context, menuId int64) (*AuthRoleMenu, error) {
	authRoleMenuMenuIdKey := fmt.Sprintf("%s%v", cacheAuthRoleMenuMenuIdPrefix, menuId)
	var resp AuthRoleMenu
	err := m.QueryRowCtx(ctx, &resp, authRoleMenuMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `menu_id` = ? limit 1", authRoleMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, menuId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthRoleMenuModel) Insert(ctx context.Context, data *AuthRoleMenu) (sql.Result, error) {
	authRoleMenuMenuIdKey := fmt.Sprintf("%s%v", cacheAuthRoleMenuMenuIdPrefix, data.MenuId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, authRoleMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleName, data.MenuId)
	}, authRoleMenuMenuIdKey)
	return ret, err
}

func (m *defaultAuthRoleMenuModel) Update(ctx context.Context, data *AuthRoleMenu) error {
	authRoleMenuMenuIdKey := fmt.Sprintf("%s%v", cacheAuthRoleMenuMenuIdPrefix, data.MenuId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `menu_id` = ?", m.table, authRoleMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RoleName, data.MenuId)
	}, authRoleMenuMenuIdKey)
	return err
}

func (m *defaultAuthRoleMenuModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAuthRoleMenuMenuIdPrefix, primary)
}

func (m *defaultAuthRoleMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `menu_id` = ? limit 1", authRoleMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuthRoleMenuModel) tableName() string {
	return m.table
}
